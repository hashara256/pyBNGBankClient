# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentInstrumentIssuingServicePIISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_confirmation_of_funds_consent(self, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Create confirmation of funds consent  # noqa: E501

        <p>This method creates a confirmation of funds consent resource, defining access rights to a dedicated account. The PSU is determined after authorization of the consent using SCA. The account is addressed explicitly in the method as parameters as a core function.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_confirmation_of_funds_consent(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param ConfirmationOfFundsConsentData body: Requestbody for a consents request (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent.</p>
        :return: AddConsentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_confirmation_of_funds_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_confirmation_of_funds_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
            return data

    def add_confirmation_of_funds_consent_with_http_info(self, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Create confirmation of funds consent  # noqa: E501

        <p>This method creates a confirmation of funds consent resource, defining access rights to a dedicated account. The PSU is determined after authorization of the consent using SCA. The account is addressed explicitly in the method as parameters as a core function.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_confirmation_of_funds_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param ConfirmationOfFundsConsentData body: Requestbody for a consents request (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent.</p>
        :return: AddConsentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'body', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_confirmation_of_funds_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_confirmation_of_funds_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddConsentResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_confirmation_of_funds_consent_authorisation(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a confirmation of funds consent  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_confirmation_of_funds_consent_authorisation(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent authorisation.</p>
        :return: AddConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_confirmation_of_funds_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
        else:
            (data) = self.add_confirmation_of_funds_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
            return data

    def add_confirmation_of_funds_consent_authorisation_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a confirmation of funds consent  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_confirmation_of_funds_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent authorisation.</p>
        :return: AddConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_confirmation_of_funds_consent_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_confirmation_of_funds_consent_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}/authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddConsentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_confirmation_of_funds_consent(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Delete Confirmation Of Funds Consent  # noqa: E501

        <p>The TPP can delete an account information consent object if needed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_confirmation_of_funds_consent(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def delete_confirmation_of_funds_consent_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Delete Confirmation Of Funds Consent  # noqa: E501

        <p>The TPP can delete an account information consent object if needed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_confirmation_of_funds_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `delete_confirmation_of_funds_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_confirmation_of_funds_consent(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Request  # noqa: E501

        <p>Returns the content of an account information consent object. This is returning the data for the TPP especially in cases, where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_confirmation_of_funds_consent_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Request  # noqa: E501

        <p>Returns the content of an account information consent object. This is returning the data for the TPP especially in cases, where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_confirmation_of_funds_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_confirmation_of_funds_consent`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_confirmation_of_funds_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentStatusResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_confirmation_of_funds_consent_authorisation_status(self, consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the confirmation of funds consent authorisation  # noqa: E501

        This method returns the SCA status of a consent's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_authorisation_status(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_confirmation_of_funds_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_confirmation_of_funds_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_confirmation_of_funds_consent_authorisation_status_with_http_info(self, consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the confirmation of funds consent authorisation  # noqa: E501

        This method returns the SCA status of a consent's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', 'authorisation_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_confirmation_of_funds_consent_authorisation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if self.api_client.client_side_validation and ('authorisation_id' not in params or
                                                       params['authorisation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorisation_id` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_confirmation_of_funds_consent_authorisation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}/authorisations/{authorisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_confirmation_of_funds_consent_authorisations(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_authorisations(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_confirmation_of_funds_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_confirmation_of_funds_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_confirmation_of_funds_consent_authorisations_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_confirmation_of_funds_consent_authorisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_confirmation_of_funds_consent_authorisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}/authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentAuthorisationsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_confirmation_of_funds_consent_status(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Status Request  # noqa: E501

        <p>Read the status of a confirmation of funds consent resource.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_status(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_confirmation_of_funds_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_confirmation_of_funds_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_confirmation_of_funds_consent_status_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Confirmation Of Funds Consent Status Request  # noqa: E501

        <p>Read the status of a confirmation of funds consent resource.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_confirmation_of_funds_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_confirmation_of_funds_consent_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_confirmation_of_funds_consent_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/confirmation-of-funds/{consentId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentStatusResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post(self, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, **kwargs):  # noqa: E501
        """Checks whether a specific amount is available at point of time of the request on an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post(_date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param FundsConfirmationDto body: <p>JSON request body for a confirmation of funds request</p> (required)
        :return: FundsConfirmationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, **kwargs)  # noqa: E501
            return data

    def post_with_http_info(self, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, **kwargs):  # noqa: E501
        """Checks whether a specific amount is available at point of time of the request on an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, authorization, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param FundsConfirmationDto body: <p>JSON request body for a confirmation of funds request</p> (required)
        :return: FundsConfirmationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `post`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `post`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `post`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/funds-confirmations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundsConfirmationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
