# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentInitiationServicePISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_bulk_payment_for_direct_debit_transfer(self, content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs):  # noqa: E501
        """Bulk Payment Initiation request for SepaDirectDebit  # noqa: E501

        <p>This method is used to initiate a bulk-direct debit at the ASPSP.</p>  <h2>Variants of Bulk Direct Debit Initiation Requests</h2>  <p>This method to initiate a bulk direct debit initiation at the ASPSP can be sent with a pain.008.001.02 XML body or using a file stream.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li>Payment products with payment information in <em>pain.008.001.02 XML</em> format:<ul><li><strong><em>pain.008-sepa-direct-debits</em></strong><br />Pain 008.001.02 XML can be posted using  two different methods:<ul><li>application/xml<br />The XML posted in the body of the request.</li><li>application/octet-stream<br />The XML posted in an XML file or as XML file in a ZIP file using a file stream (recommended for large batch files)</li></ul></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>bulk-payments</em>        </strong>: A bulk direct debit initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a direct debit.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Direct Debit Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of direct debits.</p>  <p>Payment Initiations (for each direct debit a payment initiation is created) submitted will receive the 'PDNG' status initially, since the Direct Debit has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId or paymentInitiationBatchGroupId}is required. During this redirect the PSU enters their username and reviews the transaction details for authorization and can authorize the bulk direct debits if the user has enough privileges. If mulitilevel SCA is required, the status will change to 'PATC' meaning the direct debit is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>For multibatch files it is recommended to use the {paymentInitiationBatchGroupId} when redirecting to the authorization endpoint for processing. A multibatch file is always processed at once. After it is processed, the separate payment initiation identifiers received from this API can be used to authorise specific batches. These can then be used in a redirect to the authorization endpoint.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bulk_payment_for_direct_debit_transfer(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: <p>The content type of the request.</p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :param str body: <p>Pain 008.001.02 XML as request body or of a file stream of an Pain 008.001.02 XML file or zip file containing such a file.</p>
        :return: AddBulkPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_bulk_payment_for_direct_debit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bulk_payment_for_direct_debit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs)  # noqa: E501
            return data

    def add_bulk_payment_for_direct_debit_transfer_with_http_info(self, content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs):  # noqa: E501
        """Bulk Payment Initiation request for SepaDirectDebit  # noqa: E501

        <p>This method is used to initiate a bulk-direct debit at the ASPSP.</p>  <h2>Variants of Bulk Direct Debit Initiation Requests</h2>  <p>This method to initiate a bulk direct debit initiation at the ASPSP can be sent with a pain.008.001.02 XML body or using a file stream.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li>Payment products with payment information in <em>pain.008.001.02 XML</em> format:<ul><li><strong><em>pain.008-sepa-direct-debits</em></strong><br />Pain 008.001.02 XML can be posted using  two different methods:<ul><li>application/xml<br />The XML posted in the body of the request.</li><li>application/octet-stream<br />The XML posted in an XML file or as XML file in a ZIP file using a file stream (recommended for large batch files)</li></ul></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>bulk-payments</em>        </strong>: A bulk direct debit initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a direct debit.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Direct Debit Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of direct debits.</p>  <p>Payment Initiations (for each direct debit a payment initiation is created) submitted will receive the 'PDNG' status initially, since the Direct Debit has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId or paymentInitiationBatchGroupId}is required. During this redirect the PSU enters their username and reviews the transaction details for authorization and can authorize the bulk direct debits if the user has enough privileges. If mulitilevel SCA is required, the status will change to 'PATC' meaning the direct debit is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>For multibatch files it is recommended to use the {paymentInitiationBatchGroupId} when redirecting to the authorization endpoint for processing. A multibatch file is always processed at once. After it is processed, the separate payment initiation identifiers received from this API can be used to authorise specific batches. These can then be used in a redirect to the authorization endpoint.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bulk_payment_for_direct_debit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: <p>The content type of the request.</p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :param str body: <p>Pain 008.001.02 XML as request body or of a file stream of an Pain 008.001.02 XML file or zip file containing such a file.</p>
        :return: AddBulkPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'consent_id', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_user_agent', 'psu_geo_location', 'tpp_redirect_uri', 'tpp_redirect_preferred', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bulk_payment_for_direct_debit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_bulk_payment_for_direct_debit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tpp_redirect_preferred' in params:
            query_params.append(('tppRedirectPreferred', params['tpp_redirect_preferred']))  # noqa: E501
        if 'body' in params:
            query_params.append(('Body', params['body']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bulk-payments/pain.008-sepa-direct-debits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddBulkPaymentInitiationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_bulk_payment_for_sepa_credit_transfer(self, content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs):  # noqa: E501
        """Bulk Payment Initiation request for SepaCreditTransfer  # noqa: E501

        <p>This method is used to initiate a bulk-payment at the ASPSP.</p>  <h2>Variants of Bulk Payment Initiation Requests</h2>  <p>This method to initiate a bulk payment initiation at the ASPSP can be sent with a pain.001.001.03 XML body or using a file stream.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li>Payment products with payment information in <em>pain.001.001.03 XML</em> format:<ul><li><strong><em>pain.001-sepa-credit-transfers</em></strong><br />Pain 001.001.03 XML can be posted using  two different methods:<ul><li>application/xml<br />The XML posted in the body of the request.</li><li>application/octet-stream<br />The XML posted in an XML file or as XML file in a ZIP file using a file stream (recommended for large batch files)</li></ul></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>bulk-payments</em>        </strong>: A bulk payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment Initiation has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId or paymentInitiationBatchGroupId}is required. During this redirect the PSU enters their username and reviews the transaction details for authorization and can authorize the bulk payments if the user has enough privileges. If mulitilevel SCA is required, the status will change to 'PATC' meaning the bulk payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>For multibatch files it is recommended to use the {paymentInitiationBatchGroupId} when redirecting to the authorization endpoint for processing. A multibatch file is always processed at once. After it is processed, the separate payment initiation identifiers received from this API can be used to authorise specific batches. These can then be used in a redirect to the authorization endpoint.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bulk_payment_for_sepa_credit_transfer(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: <p>The content type of the request.</p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :param str body: <p>Pain 001.001.03 XML as request body or of a file stream of an Pain 001.001.03 XML file or zip file containing such a file.</p>
        :return: AddBulkPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_bulk_payment_for_sepa_credit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bulk_payment_for_sepa_credit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs)  # noqa: E501
            return data

    def add_bulk_payment_for_sepa_credit_transfer_with_http_info(self, content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, **kwargs):  # noqa: E501
        """Bulk Payment Initiation request for SepaCreditTransfer  # noqa: E501

        <p>This method is used to initiate a bulk-payment at the ASPSP.</p>  <h2>Variants of Bulk Payment Initiation Requests</h2>  <p>This method to initiate a bulk payment initiation at the ASPSP can be sent with a pain.001.001.03 XML body or using a file stream.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li>Payment products with payment information in <em>pain.001.001.03 XML</em> format:<ul><li><strong><em>pain.001-sepa-credit-transfers</em></strong><br />Pain 001.001.03 XML can be posted using  two different methods:<ul><li>application/xml<br />The XML posted in the body of the request.</li><li>application/octet-stream<br />The XML posted in an XML file or as XML file in a ZIP file using a file stream (recommended for large batch files)</li></ul></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>bulk-payments</em>        </strong>: A bulk payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment Initiation has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId or paymentInitiationBatchGroupId}is required. During this redirect the PSU enters their username and reviews the transaction details for authorization and can authorize the bulk payments if the user has enough privileges. If mulitilevel SCA is required, the status will change to 'PATC' meaning the bulk payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>For multibatch files it is recommended to use the {paymentInitiationBatchGroupId} when redirecting to the authorization endpoint for processing. A multibatch file is always processed at once. After it is processed, the separate payment initiation identifiers received from this API can be used to authorise specific batches. These can then be used in a redirect to the authorization endpoint.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bulk_payment_for_sepa_credit_transfer_with_http_info(content_type, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: <p>The content type of the request.</p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :param str body: <p>Pain 001.001.03 XML as request body or of a file stream of an Pain 001.001.03 XML file or zip file containing such a file.</p>
        :return: AddBulkPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'consent_id', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_user_agent', 'psu_geo_location', 'tpp_redirect_uri', 'tpp_redirect_preferred', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bulk_payment_for_sepa_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tpp_redirect_preferred' in params:
            query_params.append(('tppRedirectPreferred', params['tpp_redirect_preferred']))  # noqa: E501
        if 'body' in params:
            query_params.append(('Body', params['body']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bulk-payments/pain.001-sepa-credit-transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddBulkPaymentInitiationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_payment_authorisation(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a payment initiation  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent/{payment-product} call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_authorisation(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment authorisation.</p>
        :return: AddPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_payment_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
        else:
            (data) = self.add_payment_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
            return data

    def add_payment_authorisation_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a payment initiation  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent/{payment-product} call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment authorisation.</p>
        :return: AddPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_payment_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_payment_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddPaymentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_payment_cancellation_authorisation(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a payment cancellation  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent/{payment-product} call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_cancellation_authorisation(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment authorisation.</p>
        :return: AddPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_payment_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
        else:
            (data) = self.add_payment_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
            return data

    def add_payment_cancellation_authorisation_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a payment cancellation  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent/{payment-product} call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment authorisation.</p>
        :return: AddPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_payment_cancellation_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_payment_cancellation_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddPaymentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_payment_for_cross_border_credit_transfer(self, payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Payment Initiation request for CrossBorderCreditTransfer  # noqa: E501

        <p>This method is used to initiate a cross-border payment at the ASPSP.</p>  <h2>Variants of Payment Initiation Requests</h2>  <p>This method to initiate a payment initiation at the ASPSP can be sent with a JSON body.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li> Payment products with payment information in <em>JSON</em> format: <ul><li><strong><em>cross-border-credit-transfers</em></strong></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>payments</em>        </strong>: A single payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId}is required. During this redirect the PSU can review and choose one of the following options: 1. allow the payment to be created or 2. allow the payment to be created and authorise the payment. If the PSU chooses the first option, the status will change to 'RCVD' and further authorisations will be required. Then a new redirect to the same endpoint is required again, where the PSU can then choose option 2. If mulitilevel SCA is required, the status will change to 'PATC' meaning the payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_for_cross_border_credit_transfer(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param CrossBorderPaymentDto body: <p>JSON request body for a payment inition request message</p>  <p>There are the following payment-products currently supported:</p>  <ul>    <li>\"cross-border-credit-transfers\" with JSON-Body</li>  </ul>  <p>There are the following payment-services currently supported:</p>  <ul>    <li>\"payments\"</li>  </ul> (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :return: AddPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_payment_for_cross_border_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_payment_for_cross_border_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
            return data

    def add_payment_for_cross_border_credit_transfer_with_http_info(self, payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Payment Initiation request for CrossBorderCreditTransfer  # noqa: E501

        <p>This method is used to initiate a cross-border payment at the ASPSP.</p>  <h2>Variants of Payment Initiation Requests</h2>  <p>This method to initiate a payment initiation at the ASPSP can be sent with a JSON body.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li> Payment products with payment information in <em>JSON</em> format: <ul><li><strong><em>cross-border-credit-transfers</em></strong></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>payments</em>        </strong>: A single payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId}is required. During this redirect the PSU can review and choose one of the following options: 1. allow the payment to be created or 2. allow the payment to be created and authorise the payment. If the PSU chooses the first option, the status will change to 'RCVD' and further authorisations will be required. Then a new redirect to the same endpoint is required again, where the PSU can then choose option 2. If mulitilevel SCA is required, the status will change to 'PATC' meaning the payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_for_cross_border_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param CrossBorderPaymentDto body: <p>JSON request body for a payment inition request message</p>  <p>There are the following payment-products currently supported:</p>  <ul>    <li>\"cross-border-credit-transfers\" with JSON-Body</li>  </ul>  <p>There are the following payment-services currently supported:</p>  <ul>    <li>\"payments\"</li>  </ul> (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :return: AddPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'body', 'consent_id', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_user_agent', 'psu_geo_location', 'tpp_redirect_uri', 'tpp_redirect_preferred']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_payment_for_cross_border_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_payment_for_cross_border_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501

        query_params = []
        if 'tpp_redirect_preferred' in params:
            query_params.append(('tppRedirectPreferred', params['tpp_redirect_preferred']))  # noqa: E501

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payments/cross-border-credit-transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddPaymentInitiationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_payment_for_sepa_credit_transfer(self, payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Payment Initiation request for SepaCreditTransfer  # noqa: E501

        <p>This method is used to initiate a payment at the ASPSP.</p>  <h2>Variants of Payment Initiation Requests</h2>  <p>This method to initiate a payment initiation at the ASPSP can be sent with a JSON body.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li> Payment products with payment information in <em>JSON</em> format: <ul><li><strong><em>sepa-credit-transfers</em></strong></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>payments</em>        </strong>: A single payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId}is required. During this redirect the PSU can review and choose one of the following options: 1. allow the payment to be created or 2. allow the payment to be created and authorise the payment. If the PSU chooses the first option, the status will change to 'RCVD' and further authorisations will be required. Then a new redirect to the same endpoint is required again, where the PSU can then choose option 2. If mulitilevel SCA is required, the status will change to 'PATC' meaning the payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_for_sepa_credit_transfer(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param SinglePaymentDto body: <p>JSON request body for a payment inition request message</p>  <p>There are the following payment-products currently supported:</p>  <ul>    <li>\"sepa-credit-transfers\" with JSON-Body</li>  </ul>  <p>There are the following payment-services currently supported:</p>  <ul>    <li>\"payments\"</li>  </ul> (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :return: AddPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_payment_for_sepa_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_payment_for_sepa_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
            return data

    def add_payment_for_sepa_credit_transfer_with_http_info(self, payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Payment Initiation request for SepaCreditTransfer  # noqa: E501

        <p>This method is used to initiate a payment at the ASPSP.</p>  <h2>Variants of Payment Initiation Requests</h2>  <p>This method to initiate a payment initiation at the ASPSP can be sent with a JSON body.</p>  <p>There are the following <strong>payment products</strong> that are currently supported:</p>  <ul>    <li> Payment products with payment information in <em>JSON</em> format: <ul><li><strong><em>sepa-credit-transfers</em></strong></li></ul></li>  </ul>  <p>Furthermore the request body depends on the <strong>payment-service</strong></p>  <ul>    <li>      <p>        <strong>          <em>payments</em>        </strong>: A single payment initiation request.</p>    </li>  </ul>  <p>This is the first step in the API to initiate a payment.</p>  <h2>Single and mulitilevel SCA Processes</h2>  <p>The Payment Initiation Requests are independent from the need of one ore multilevel SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.</p>  <p>Payment Initiations submitted will receive the 'PDNG' status initially, since the Payment has not been reviewed and confirmed by a PSU yet. In order to proceed with the Payment Initiation, a redirect to the 'scaOAuth' authorization endpoint with scope PIS:{paymentId}is required. During this redirect the PSU can review and choose one of the following options: 1. allow the payment to be created or 2. allow the payment to be created and authorise the payment. If the PSU chooses the first option, the status will change to 'RCVD' and further authorisations will be required. Then a new redirect to the same endpoint is required again, where the PSU can then choose option 2. If mulitilevel SCA is required, the status will change to 'PATC' meaning the payment is partially authorised. A different PSU will then need to be redirected the same way to make the final authorisation. After which the status will change to 'ACTC'.</p>  <p>Funds confirmations are not supported by the ASPSP for this service.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_payment_for_sepa_credit_transfer_with_http_info(payment_service, payment_product, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param SinglePaymentDto body: <p>JSON request body for a payment inition request message</p>  <p>There are the following payment-products currently supported:</p>  <ul>    <li>\"sepa-credit-transfers\" with JSON-Body</li>  </ul>  <p>There are the following payment-services currently supported:</p>  <ul>    <li>\"payments\"</li>  </ul> (required)
        :param str consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. Currently this field can be provided, but it does not do anything extra, since the payment initiation always needs to be reviewed by the PSU using the SCA Redirect OAuth approach.
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this payment initiation. Note that this URI should not be PSU specific, incase of multilevel SCA required for this payment initiation, another PSU also needs to be able to be redirected to the OAuth authorization endpoint with the same redirect URI.</p>
        :param bool tpp_redirect_preferred: This field is ignored, since a redirect approach is always used by the ASPSP.
        :return: AddPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'body', 'consent_id', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_user_agent', 'psu_geo_location', 'tpp_redirect_uri', 'tpp_redirect_preferred']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_payment_for_sepa_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_payment_for_sepa_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501

        query_params = []
        if 'tpp_redirect_preferred' in params:
            query_params.append(('tppRedirectPreferred', params['tpp_redirect_preferred']))  # noqa: E501

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payments/sepa-credit-transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddPaymentInitiationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, **kwargs):  # noqa: E501
        """Delete Payment  # noqa: E501

        <p>Deletes or cancels a payment.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, **kwargs):  # noqa: E501
        """Delete Payment  # noqa: E501

        <p>Deletes or cancels a payment.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'authorization', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_user_agent', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `delete`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `delete`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `delete`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `delete`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `delete`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `delete`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `delete`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `delete`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bulk_payment_for_direct_debit_transfer(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Bulk Payment for Direct Debit Information  # noqa: E501

        <p>Returns the content of a bulk payment for direct debit object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_payment_for_direct_debit_transfer(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForBulkPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bulk_payment_for_direct_debit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bulk_payment_for_direct_debit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_bulk_payment_for_direct_debit_transfer_with_http_info(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Bulk Payment for Direct Debit Information  # noqa: E501

        <p>Returns the content of a bulk payment for direct debit object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_payment_for_direct_debit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForBulkPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_payment_for_direct_debit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_bulk_payment_for_direct_debit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bulk-payments/pain.008-sepa-direct-debits/{paymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentInitiationForBulkPaymentResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bulk_payment_for_sepa_credit_transfer(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Bulk Payment Information  # noqa: E501

        <p>Returns the content of a bulk payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_payment_for_sepa_credit_transfer(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForBulkPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bulk_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bulk_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_bulk_payment_for_sepa_credit_transfer_with_http_info(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Bulk Payment Information  # noqa: E501

        <p>Returns the content of a bulk payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForBulkPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_payment_for_sepa_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_bulk_payment_for_sepa_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bulk-payments/pain.001-sepa-credit-transfers/{paymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentInitiationForBulkPaymentResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_authorisation_status(self, payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the payment authorisation  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_authorisation_status(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_authorisation_status_with_http_info(self, payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the payment authorisation  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'authorisation_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_authorisation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if self.api_client.client_side_validation and ('authorisation_id' not in params or
                                                       params['authorisation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorisation_id` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_authorisation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_authorisations(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_authorisations(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_authorisations_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_authorisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_authorisations`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_authorisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentAuthorisationsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_cancellation_authorisation_status(self, payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the payment authorisation  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_authorisation_status(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_cancellation_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_cancellation_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_cancellation_authorisation_status_with_http_info(self, payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the payment authorisation  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_authorisation_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'authorisation_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_cancellation_authorisation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if self.api_client.client_side_validation and ('authorisation_id' not in params or
                                                       params['authorisation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorisation_id` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_cancellation_authorisation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_cancellation_authorisations(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_authorisations(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_cancellation_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_cancellation_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_cancellation_authorisations_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_authorisations_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_cancellation_authorisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_cancellation_authorisations`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_cancellation_authorisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentAuthorisationsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_for_cross_border_credit_transfer(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Cross-Border Payment Information  # noqa: E501

        <p>Returns the content of a cross-border payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_for_cross_border_credit_transfer(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForCrossBorderPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_for_cross_border_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_for_cross_border_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_for_cross_border_credit_transfer_with_http_info(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Cross-Border Payment Information  # noqa: E501

        <p>Returns the content of a cross-border payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_for_cross_border_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationForCrossBorderPaymentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_for_cross_border_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_for_cross_border_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payments/cross-border-credit-transfers/{paymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentInitiationForCrossBorderPaymentResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_for_sepa_credit_transfer(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Information  # noqa: E501

        <p>Returns the content of a payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_for_sepa_credit_transfer(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_for_sepa_credit_transfer_with_http_info(self, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Payment Information  # noqa: E501

        <p>Returns the content of a payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_for_sepa_credit_transfer_with_http_info(payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_for_sepa_credit_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_for_sepa_credit_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payments/sepa-credit-transfers/{paymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentInitiationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Payment initiation status request  # noqa: E501

        <p>Returns the content of a payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_status_with_http_info(self, payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Payment initiation status request  # noqa: E501

        <p>Returns the content of a payment object</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_with_http_info(payment_service, payment_product, payment_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: <p>The following payment services are currently supported:</p>  <ul>    <li>payments</li>  </ul> (required)
        :param str payment_product: <p>The following payment products are currently supported:</p>  <ul>    <li>sepa-credit-transfers</li>    <li>cross-border-credit-transfers</li>  </ul> (required)
        :param str payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetPaymentInitiationStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if self.api_client.client_side_validation and ('payment_service' not in params or
                                                       params['payment_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_service` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if self.api_client.client_side_validation and ('payment_product' not in params or
                                                       params['payment_product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_product` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in params or
                                                       params['payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_id` when calling `get_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{payment-service}/{payment-product}/{paymentId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaymentInitiationStatusResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
