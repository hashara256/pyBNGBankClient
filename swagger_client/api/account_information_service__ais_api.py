# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountInformationServiceAISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_consent(self, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Create consent  # noqa: E501

        <p>This method creates a consent resource, defining access rights to dedicated accounts. The PSU is determined after authorization of the consent using SCA. These accounts are addressed explicitly in the method as parameters as a core function.</p>  <p>Side Effects When this Consent Request is a request where the \"recurringIndicator\" equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU.</p>  <p>Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts.</p>  <p>    <ul>      <li>to see the list of available payment accounts or</li>      <li>to see the list of available payment accounts with balances.</li>    </ul>  </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_consent(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param AccountConsentData body: Requestbody for a consents request (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent.</p>
        :return: AddConsentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs)  # noqa: E501
            return data

    def add_consent_with_http_info(self, _date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, **kwargs):  # noqa: E501
        """Create consent  # noqa: E501

        <p>This method creates a consent resource, defining access rights to dedicated accounts. The PSU is determined after authorization of the consent using SCA. These accounts are addressed explicitly in the method as parameters as a core function.</p>  <p>Side Effects When this Consent Request is a request where the \"recurringIndicator\" equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU.</p>  <p>Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts.</p>  <p>    <ul>      <li>to see the list of available payment accounts or</li>      <li>to see the list of available payment accounts with balances.</li>    </ul>  </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_consent_with_http_info(_date, x_request_id, digest, signature, tpp_signature_certificate, psu_ip_address, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (required)
        :param AccountConsentData body: Requestbody for a consents request (required)
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_id_type: Type of the PSU-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id: Corporate ID of the PSU. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str psu_corporate_id_type: Type of the Corporate-ID. This field is optional and is not used to identify the PSU, this is done using the SCA Redirect OAuth approach.
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent.</p>
        :return: AddConsentResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'body', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if self.api_client.client_side_validation and ('psu_ip_address' not in params or
                                                       params['psu_ip_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `add_consent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddConsentResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_consent_authorisation(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a consent  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_consent_authorisation(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent authorisation.</p>
        :return: AddConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
        else:
            (data) = self.add_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs)  # noqa: E501
            return data

    def add_consent_authorisation_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, **kwargs):  # noqa: E501
        """Start the authorisation process for a consent  # noqa: E501

        <p>Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.</p>  <p>The usage of this access method is unnecessary since only one SCA process is needed, and the related authorisation resource is automatically created by the ASPSP after the submission of the consent data with the first POST consent call.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_consent_authorisation_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: Date of the request. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request. (required)
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. (required)
        :param str tpp_redirect_uri: <p>URI of the TPP, where the transaction flow shall be redirected to after a Redirect.</p>  <p>This URI is checked against during the SCA Redirect OAuth approach, where this URI is matched against the redirect_uri used in the OAuth redirect for this consent authorisation.</p>
        :return: AddConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'tpp_redirect_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_consent_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `add_consent_authorisation`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `add_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `add_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `add_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `add_consent_authorisation`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `add_consent_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}/authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddConsentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_consent(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Delete Consent  # noqa: E501

        <p>The TPP can delete an account information consent object if needed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_consent(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def delete_consent_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Delete Consent  # noqa: E501

        <p>The TPP can delete an account information consent object if needed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `delete_consent`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `delete_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account List  # noqa: E501

        <p>Read the identifiers of the available payment account together with booking balance information, depending on the consent granted.</p>  <p>It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId, respectively the OAuth2 access token.</p>  <p>Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.</p>  <p>Remark: Note that the /consents endpoint optionally offers to grant an access on all available payment accounts of a PSU. In this case, this endpoint will deliver the information about all available payment accounts of the PSU at this ASPSP.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(_date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadAccountListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(_date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(_date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account List  # noqa: E501

        <p>Read the identifiers of the available payment account together with booking balance information, depending on the consent granted.</p>  <p>It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId, respectively the OAuth2 access token.</p>  <p>Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.</p>  <p>Remark: Note that the /consents endpoint optionally offers to grant an access on all available payment accounts of a PSU. In this case, this endpoint will deliver the information about all available payment accounts of the PSU at this ASPSP.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(_date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadAccountListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'with_balance', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadAccountListResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_balances(self, account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Balance  # noqa: E501

        <p>Reads account data from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_balances(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadBalanceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_balances_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_balances_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_account_balances_with_http_info(self, account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Balance  # noqa: E501

        <p>Reads account data from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_balances_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadBalanceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', '_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_balances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_account_balances`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_account_balances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{account-id}/balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadBalanceResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_details(self, account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account Details  # noqa: E501

        <p>Reads details about an account, with balances where required. It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system. The addressed details of this account depends then on the stored consent addressed by consentId, respectively the OAuth2 access token.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_details(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param bool with_balance: If contained, this function reads the details of the accessible payment account including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadAccountDetailsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_details_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_details_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_account_details_with_http_info(self, account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account Details  # noqa: E501

        <p>Reads details about an account, with balances where required. It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system. The addressed details of this account depends then on the stored consent addressed by consentId, respectively the OAuth2 access token.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_details_with_http_info(account_id, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param bool with_balance: If contained, this function reads the details of the accessible payment account including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadAccountDetailsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', '_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'with_balance', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_account_details`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_account_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{account-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadAccountDetailsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consent(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Consent Request  # noqa: E501

        <p>Returns the content of an account information consent object. This is returning the data for the TPP especially in cases, where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_consent_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Consent Request  # noqa: E501

        <p>Returns the content of an account information consent object. This is returning the data for the TPP especially in cases, where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_consent`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_consent`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_consent`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_consent`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_consent`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_consent`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_consent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentStatusResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consent_authorisation_status(self, consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the consent authorisation  # noqa: E501

        This method returns the SCA status of a consent's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_authorisation_status(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_consent_authorisation_status_with_http_info(self, consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read the SCA Status of the consent authorisation  # noqa: E501

        This method returns the SCA status of a consent's authorisation sub-resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_authorisation_status_with_http_info(consent_id, authorisation_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str authorisation_id: Resource identification of the generated authorisation sub-resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', 'authorisation_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent_authorisation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if self.api_client.client_side_validation and ('authorisation_id' not in params or
                                                       params['authorisation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorisation_id` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_consent_authorisation_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_consent_authorisation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}/authorisations/{authorisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentAuthorisationResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consent_authorisations(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Consent Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_authorisations(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_consent_authorisations_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Get Consent Initiation Authorisation Sub-Resources Request  # noqa: E501

        <p>Read a list of all authorisation subresources IDs which have been created.</p>  <p>This function returns an array of hyperlinks to all generated authorisation sub-resources.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_authorisations_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent initiation resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentAuthorisationsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent_authorisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_consent_authorisations`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_consent_authorisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}/authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentAuthorisationsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consent_status(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Consent status request  # noqa: E501

        <p>Read the status of an account information consent resource.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_status(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_consent_status_with_http_info(self, consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Consent status request  # noqa: E501

        <p>Read the status of an account information consent resource.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consent_status_with_http_info(consent_id, _date, x_request_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consent_id: Resource identification of the generated consent resource. (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :return: GetConsentStatusResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consent_id', '_date', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_consent_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_consent_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'consent_id' in params:
            path_params['consentId'] = params['consent_id']  # noqa: E501

        query_params = []

        header_params = {}
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/consents/{consentId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConsentStatusResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statements(self, account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account Statements  # noqa: E501

        <p>Reads booked camt.053 statements from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statements(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str date_from: Starting date (inclusive the date dateFrom) of the transaction list. (required)
        :param str booking_status: Permitted codes are \"booked\". (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>xml, CAMT053</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param datetime start_date:
        :param str date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.
        :param datetime end_date:
        :param str booking_status_enum:
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statements_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statements_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_statements_with_http_info(self, account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Account Statements  # noqa: E501

        <p>Reads booked camt.053 statements from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statements_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str date_from: Starting date (inclusive the date dateFrom) of the transaction list. (required)
        :param str booking_status: Permitted codes are \"booked\". (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>xml, CAMT053</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param datetime start_date:
        :param str date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.
        :param datetime end_date:
        :param str booking_status_enum:
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'date_from', 'booking_status', 'accept', '_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'start_date', 'date_to', 'end_date', 'booking_status_enum', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'date_from' is set
        if self.api_client.client_side_validation and ('date_from' not in params or
                                                       params['date_from'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `date_from` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'booking_status' is set
        if self.api_client.client_side_validation and ('booking_status' not in params or
                                                       params['booking_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking_status` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and ('accept' not in params or
                                                       params['accept'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept` when calling `get_statements`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_statements`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'booking_status' in params:
            query_params.append(('bookingStatus', params['booking_status']))  # noqa: E501
        if 'booking_status_enum' in params:
            query_params.append(('BookingStatusEnum', params['booking_status_enum']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{account-id}/statements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_details(self, account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Transaction Details  # noqa: E501

        <p>Reads transaction details from a given account addressed by \"account-id\" and by a \"transaction-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_details(account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str transaction_id: Resource identification of the transaction resource. (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>JSON</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadTransactionDetailsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_details_with_http_info(account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_details_with_http_info(account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_transaction_details_with_http_info(self, account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Transaction Details  # noqa: E501

        <p>Reads transaction details from a given account addressed by \"account-id\" and by a \"transaction-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_details_with_http_info(account_id, transaction_id, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str transaction_id: Resource identification of the transaction resource. (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>JSON</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadTransactionDetailsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'transaction_id', 'accept', '_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if self.api_client.client_side_validation and ('transaction_id' not in params or
                                                       params['transaction_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and ('accept' not in params or
                                                       params['accept'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_transaction_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transaction-id'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{account-id}/transactions/{transaction-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadTransactionDetailsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transactions(self, account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Transactions  # noqa: E501

        <p>Reads transactions from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str date_from: Starting date (inclusive the date dateFrom) of the transaction list. (required)
        :param str booking_status: Permitted codes are \"booked\", \"pending\" and \"both\". (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>JSON</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param datetime start_date:
        :param str date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.
        :param datetime end_date:
        :param str booking_status_enum:
        :param bool with_balance: If contained, this function reads the list of transactions including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param int page: The page to request (used in pagination).
        :param bool download: Indicates if the request is to download a file.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadTransactionsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transactions_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transactions_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs)  # noqa: E501
            return data

    def get_transactions_with_http_info(self, account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, **kwargs):  # noqa: E501
        """Read Transactions  # noqa: E501

        <p>Reads transactions from a given account addressed by \"account-id\".</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_with_http_info(account_id, date_from, booking_status, accept, _date, x_request_id, consent_id, digest, signature, tpp_signature_certificate, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Resource identification of the generated account resource. (required)
        :param str date_from: Starting date (inclusive the date dateFrom) of the transaction list. (required)
        :param str booking_status: Permitted codes are \"booked\", \"pending\" and \"both\". (required)
        :param str accept: <p>The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.</p>  <p>The formats supported by this specification are:<br /><ul><li>JSON</li></ul></p> (required)
        :param str _date: <p>The date of the request.</p> (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str consent_id: ID of the consent, which was retrieved using the /consents endpoint. (required)
        :param str digest: Digest of the body of the request. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str signature: A signature of the request. The ASPSP mandates the use of a signature. (required)
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding. This field is mandatory, because the ASPSP mandates the use of a signature. (required)
        :param str authorization: The bearer access token of the OAuth2 process required for accessing this API. (required)
        :param datetime start_date:
        :param str date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.
        :param datetime end_date:
        :param str booking_status_enum:
        :param bool with_balance: If contained, this function reads the list of transactions including the booking balance, if granted by the PSU in the related consent and available by the ASPSP.
        :param int page: The page to request (used in pagination).
        :param bool download: Indicates if the request is to download a file.
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
        :return: ReadTransactionsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'date_from', 'booking_status', 'accept', '_date', 'x_request_id', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'authorization', 'start_date', 'date_to', 'end_date', 'booking_status_enum', 'with_balance', 'page', 'download', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'date_from' is set
        if self.api_client.client_side_validation and ('date_from' not in params or
                                                       params['date_from'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `date_from` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'booking_status' is set
        if self.api_client.client_side_validation and ('booking_status' not in params or
                                                       params['booking_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking_status` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and ('accept' not in params or
                                                       params['accept'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if self.api_client.client_side_validation and ('x_request_id' not in params or
                                                       params['x_request_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if self.api_client.client_side_validation and ('consent_id' not in params or
                                                       params['consent_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consent_id` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'digest' is set
        if self.api_client.client_side_validation and ('digest' not in params or
                                                       params['digest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `digest` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if self.api_client.client_side_validation and ('signature' not in params or
                                                       params['signature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `signature` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'tpp_signature_certificate' is set
        if self.api_client.client_side_validation and ('tpp_signature_certificate' not in params or
                                                       params['tpp_signature_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tpp_signature_certificate` when calling `get_transactions`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'booking_status' in params:
            query_params.append(('bookingStatus', params['booking_status']))  # noqa: E501
        if 'booking_status_enum' in params:
            query_params.append(('BookingStatusEnum', params['booking_status_enum']))  # noqa: E501
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if '_date' in params:
            header_params['Date'] = params['_date']  # noqa: E501
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{account-id}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadTransactionsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
