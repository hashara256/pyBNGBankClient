# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddConsentResponseLinksDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sca_o_auth': 'HrefTypeDto',
        '_self': 'HrefTypeDto',
        'status': 'HrefTypeDto',
        'start_authorisation': 'HrefTypeDto'
    }

    attribute_map = {
        'sca_o_auth': 'scaOAuth',
        '_self': 'self',
        'status': 'status',
        'start_authorisation': 'startAuthorisation'
    }

    def __init__(self, sca_o_auth=None, _self=None, status=None, start_authorisation=None, _configuration=None):  # noqa: E501
        """AddConsentResponseLinksDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sca_o_auth = None
        self.__self = None
        self._status = None
        self._start_authorisation = None
        self.discriminator = None

        if sca_o_auth is not None:
            self.sca_o_auth = sca_o_auth
        if _self is not None:
            self._self = _self
        if status is not None:
            self.status = status
        if start_authorisation is not None:
            self.start_authorisation = start_authorisation

    @property
    def sca_o_auth(self):
        """Gets the sca_o_auth of this AddConsentResponseLinksDto.  # noqa: E501

        A link to the OAuth2 configuration endpoint. When this link is present, one of the next steps is to redirect the PSU to the OAuth2 authorization endpoint.  Use scope AIS during the redirect. The PSU can then review and approve the consent.  # noqa: E501

        :return: The sca_o_auth of this AddConsentResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self._sca_o_auth

    @sca_o_auth.setter
    def sca_o_auth(self, sca_o_auth):
        """Sets the sca_o_auth of this AddConsentResponseLinksDto.

        A link to the OAuth2 configuration endpoint. When this link is present, one of the next steps is to redirect the PSU to the OAuth2 authorization endpoint.  Use scope AIS during the redirect. The PSU can then review and approve the consent.  # noqa: E501

        :param sca_o_auth: The sca_o_auth of this AddConsentResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self._sca_o_auth = sca_o_auth

    @property
    def _self(self):
        """Gets the _self of this AddConsentResponseLinksDto.  # noqa: E501

        A link to the consent resource created, with this link information of the consent can be retrieved.  # noqa: E501

        :return: The _self of this AddConsentResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AddConsentResponseLinksDto.

        A link to the consent resource created, with this link information of the consent can be retrieved.  # noqa: E501

        :param _self: The _self of this AddConsentResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this AddConsentResponseLinksDto.  # noqa: E501

        A link to the consent resource created, with this link status information of the consent can be retrieved.  # noqa: E501

        :return: The status of this AddConsentResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddConsentResponseLinksDto.

        A link to the consent resource created, with this link status information of the consent can be retrieved.  # noqa: E501

        :param status: The status of this AddConsentResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self._status = status

    @property
    def start_authorisation(self):
        """Gets the start_authorisation of this AddConsentResponseLinksDto.  # noqa: E501

        A link to create or retrieve consent authorisation sub-resources of the consent created.  When this link is present, to start the authorisation of the consent, this link might be present.  Note that the ASPSP requires a SCA Redirect OAuth2 approach to authorise the consent.  Use the scaOAuth link with the scope AIS instead.  # noqa: E501

        :return: The start_authorisation of this AddConsentResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self._start_authorisation

    @start_authorisation.setter
    def start_authorisation(self, start_authorisation):
        """Sets the start_authorisation of this AddConsentResponseLinksDto.

        A link to create or retrieve consent authorisation sub-resources of the consent created.  When this link is present, to start the authorisation of the consent, this link might be present.  Note that the ASPSP requires a SCA Redirect OAuth2 approach to authorise the consent.  Use the scaOAuth link with the scope AIS instead.  # noqa: E501

        :param start_authorisation: The start_authorisation of this AddConsentResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self._start_authorisation = start_authorisation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddConsentResponseLinksDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddConsentResponseLinksDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddConsentResponseLinksDto):
            return True

        return self.to_dict() != other.to_dict()
