# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddBulkPaymentInitiationResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_status': 'str',
        'payment_id': 'str',
        'payment_initiation_batch_group_id': 'str',
        'payment_initiation_initiations': 'list[AddBulkPaymentInitiationResponsePaymentInitiationDto]',
        'links': 'AddBulkPaymentInitiationResponseLinksDto'
    }

    attribute_map = {
        'transaction_status': 'transactionStatus',
        'payment_id': 'paymentId',
        'payment_initiation_batch_group_id': 'paymentInitiationBatchGroupId',
        'payment_initiation_initiations': 'paymentInitiationInitiations',
        'links': '_links'
    }

    def __init__(self, transaction_status=None, payment_id=None, payment_initiation_batch_group_id=None, payment_initiation_initiations=None, links=None, _configuration=None):  # noqa: E501
        """AddBulkPaymentInitiationResponseDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transaction_status = None
        self._payment_id = None
        self._payment_initiation_batch_group_id = None
        self._payment_initiation_initiations = None
        self._links = None
        self.discriminator = None

        if transaction_status is not None:
            self.transaction_status = transaction_status
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_initiation_batch_group_id is not None:
            self.payment_initiation_batch_group_id = payment_initiation_batch_group_id
        if payment_initiation_initiations is not None:
            self.payment_initiation_initiations = payment_initiation_initiations
        if links is not None:
            self.links = links

    @property
    def transaction_status(self):
        """Gets the transaction_status of this AddBulkPaymentInitiationResponseDto.  # noqa: E501

        The transaction status of the bulk payment initiation created.  # noqa: E501

        :return: The transaction_status of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this AddBulkPaymentInitiationResponseDto.

        The transaction status of the bulk payment initiation created.  # noqa: E501

        :param transaction_status: The transaction_status of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDNG", "RCVD", "PATC", "ACTC", "ACWC", "CANC", "RJCT", "PCAN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                transaction_status not in allowed_values):
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status

    @property
    def payment_id(self):
        """Gets the payment_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501

        This is the identifier of the bulk payment initiation created. This identifier will be used later to reference this bulk payment initiation.  # noqa: E501

        :return: The payment_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this AddBulkPaymentInitiationResponseDto.

        This is the identifier of the bulk payment initiation created. This identifier will be used later to reference this bulk payment initiation.  # noqa: E501

        :param payment_id: The payment_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_initiation_batch_group_id(self):
        """Gets the payment_initiation_batch_group_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501

        This is the group identifier of the bulk payment initiation created. This identifier will be used later to reference this bulk payment initiation. This paymentInitiationBatchGroupId is used to group the batches in a posted multi batch file.  # noqa: E501

        :return: The payment_initiation_batch_group_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._payment_initiation_batch_group_id

    @payment_initiation_batch_group_id.setter
    def payment_initiation_batch_group_id(self, payment_initiation_batch_group_id):
        """Sets the payment_initiation_batch_group_id of this AddBulkPaymentInitiationResponseDto.

        This is the group identifier of the bulk payment initiation created. This identifier will be used later to reference this bulk payment initiation. This paymentInitiationBatchGroupId is used to group the batches in a posted multi batch file.  # noqa: E501

        :param payment_initiation_batch_group_id: The payment_initiation_batch_group_id of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :type: str
        """

        self._payment_initiation_batch_group_id = payment_initiation_batch_group_id

    @property
    def payment_initiation_initiations(self):
        """Gets the payment_initiation_initiations of this AddBulkPaymentInitiationResponseDto.  # noqa: E501

        This is a list of bulk payment initiation identifiers created for a bulk payment initiation request. If a multi batch file was posted, multiple payment initiation identifiers will be present.  # noqa: E501

        :return: The payment_initiation_initiations of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :rtype: list[AddBulkPaymentInitiationResponsePaymentInitiationDto]
        """
        return self._payment_initiation_initiations

    @payment_initiation_initiations.setter
    def payment_initiation_initiations(self, payment_initiation_initiations):
        """Sets the payment_initiation_initiations of this AddBulkPaymentInitiationResponseDto.

        This is a list of bulk payment initiation identifiers created for a bulk payment initiation request. If a multi batch file was posted, multiple payment initiation identifiers will be present.  # noqa: E501

        :param payment_initiation_initiations: The payment_initiation_initiations of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :type: list[AddBulkPaymentInitiationResponsePaymentInitiationDto]
        """

        self._payment_initiation_initiations = payment_initiation_initiations

    @property
    def links(self):
        """Gets the links of this AddBulkPaymentInitiationResponseDto.  # noqa: E501

        This is a list of links containing possible next actions that can be performed after the this bulk payment initiation request.  # noqa: E501

        :return: The links of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :rtype: AddBulkPaymentInitiationResponseLinksDto
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AddBulkPaymentInitiationResponseDto.

        This is a list of links containing possible next actions that can be performed after the this bulk payment initiation request.  # noqa: E501

        :param links: The links of this AddBulkPaymentInitiationResponseDto.  # noqa: E501
        :type: AddBulkPaymentInitiationResponseLinksDto
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddBulkPaymentInitiationResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddBulkPaymentInitiationResponseDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddBulkPaymentInitiationResponseDto):
            return True

        return self.to_dict() != other.to_dict()
