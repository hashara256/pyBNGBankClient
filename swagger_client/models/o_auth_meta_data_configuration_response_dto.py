# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuthMetaDataConfigurationResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'authorization_endpoint': 'str',
        'token_endpoint': 'str',
        'scopes_supported': 'list[str]',
        'response_types_supported': 'list[str]',
        'grant_types_supported': 'list[str]',
        'code_challenge_methods_supported': 'list[str]',
        'service_documentation': 'str'
    }

    attribute_map = {
        'issuer': 'issuer',
        'authorization_endpoint': 'authorization_endpoint',
        'token_endpoint': 'token_endpoint',
        'scopes_supported': 'scopes_supported',
        'response_types_supported': 'response_types_supported',
        'grant_types_supported': 'grant_types_supported',
        'code_challenge_methods_supported': 'code_challenge_methods_supported',
        'service_documentation': 'service_documentation'
    }

    def __init__(self, issuer=None, authorization_endpoint=None, token_endpoint=None, scopes_supported=None, response_types_supported=None, grant_types_supported=None, code_challenge_methods_supported=None, service_documentation=None, _configuration=None):  # noqa: E501
        """OAuthMetaDataConfigurationResponseDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._issuer = None
        self._authorization_endpoint = None
        self._token_endpoint = None
        self._scopes_supported = None
        self._response_types_supported = None
        self._grant_types_supported = None
        self._code_challenge_methods_supported = None
        self._service_documentation = None
        self.discriminator = None

        if issuer is not None:
            self.issuer = issuer
        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        if scopes_supported is not None:
            self.scopes_supported = scopes_supported
        if response_types_supported is not None:
            self.response_types_supported = response_types_supported
        if grant_types_supported is not None:
            self.grant_types_supported = grant_types_supported
        if code_challenge_methods_supported is not None:
            self.code_challenge_methods_supported = code_challenge_methods_supported
        if service_documentation is not None:
            self.service_documentation = service_documentation

    @property
    def issuer(self):
        """Gets the issuer of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        The name of the issuer.  # noqa: E501

        :return: The issuer of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OAuthMetaDataConfigurationResponseDto.

        The name of the issuer.  # noqa: E501

        :param issuer: The issuer of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        The URI of the authorization endpoint.  # noqa: E501

        :return: The authorization_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this OAuthMetaDataConfigurationResponseDto.

        The URI of the authorization endpoint.  # noqa: E501

        :param authorization_endpoint: The authorization_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        The URI of the token endpoint.  # noqa: E501

        :return: The token_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this OAuthMetaDataConfigurationResponseDto.

        The URI of the token endpoint.  # noqa: E501

        :param token_endpoint: The token_endpoint of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def scopes_supported(self):
        """Gets the scopes_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        <p>A list of scopes supported.</p>  <p>The following scopes are supported:<ul><li>PIS:{paymentId} = Review and/or authorise a payment initiation</li></ul></p>  # noqa: E501

        :return: The scopes_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        """Sets the scopes_supported of this OAuthMetaDataConfigurationResponseDto.

        <p>A list of scopes supported.</p>  <p>The following scopes are supported:<ul><li>PIS:{paymentId} = Review and/or authorise a payment initiation</li></ul></p>  # noqa: E501

        :param scopes_supported: The scopes_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: list[str]
        """

        self._scopes_supported = scopes_supported

    @property
    def response_types_supported(self):
        """Gets the response_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        <p>A list of response types supported.</p>  <p>The following response types are supported:<ul><li>code = An authorization code is returned after a successful SCA Redirect using OAuth2</li></ul></p>  # noqa: E501

        :return: The response_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        """Sets the response_types_supported of this OAuthMetaDataConfigurationResponseDto.

        <p>A list of response types supported.</p>  <p>The following response types are supported:<ul><li>code = An authorization code is returned after a successful SCA Redirect using OAuth2</li></ul></p>  # noqa: E501

        :param response_types_supported: The response_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: list[str]
        """

        self._response_types_supported = response_types_supported

    @property
    def grant_types_supported(self):
        """Gets the grant_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        <p>A list of grant types supported.</p>  <p>The following grant types are supported:<ul><li>authorization_code = An authorization code is used to retrieve an access token</li></ul></p>  # noqa: E501

        :return: The grant_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types_supported

    @grant_types_supported.setter
    def grant_types_supported(self, grant_types_supported):
        """Sets the grant_types_supported of this OAuthMetaDataConfigurationResponseDto.

        <p>A list of grant types supported.</p>  <p>The following grant types are supported:<ul><li>authorization_code = An authorization code is used to retrieve an access token</li></ul></p>  # noqa: E501

        :param grant_types_supported: The grant_types_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: list[str]
        """

        self._grant_types_supported = grant_types_supported

    @property
    def code_challenge_methods_supported(self):
        """Gets the code_challenge_methods_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        <p>A list of code challenge methods supported.</p>  <p>The following code challenge methods are supported:<ul><li>plain = a code verifier is send in the same form in the authorization request and token request</li><li>S256 = a code verifier is send in SHA-256 in the authorization request and in plain form in the token request</li></ul></p>  # noqa: E501

        :return: The code_challenge_methods_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_challenge_methods_supported

    @code_challenge_methods_supported.setter
    def code_challenge_methods_supported(self, code_challenge_methods_supported):
        """Sets the code_challenge_methods_supported of this OAuthMetaDataConfigurationResponseDto.

        <p>A list of code challenge methods supported.</p>  <p>The following code challenge methods are supported:<ul><li>plain = a code verifier is send in the same form in the authorization request and token request</li><li>S256 = a code verifier is send in SHA-256 in the authorization request and in plain form in the token request</li></ul></p>  # noqa: E501

        :param code_challenge_methods_supported: The code_challenge_methods_supported of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: list[str]
        """

        self._code_challenge_methods_supported = code_challenge_methods_supported

    @property
    def service_documentation(self):
        """Gets the service_documentation of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501

        The URI to the service documentation.  # noqa: E501

        :return: The service_documentation of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._service_documentation

    @service_documentation.setter
    def service_documentation(self, service_documentation):
        """Sets the service_documentation of this OAuthMetaDataConfigurationResponseDto.

        The URI to the service documentation.  # noqa: E501

        :param service_documentation: The service_documentation of this OAuthMetaDataConfigurationResponseDto.  # noqa: E501
        :type: str
        """

        self._service_documentation = service_documentation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthMetaDataConfigurationResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthMetaDataConfigurationResponseDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthMetaDataConfigurationResponseDto):
            return True

        return self.to_dict() != other.to_dict()
