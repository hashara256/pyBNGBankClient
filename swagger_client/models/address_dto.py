# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddressDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street_name': 'str',
        'town_name': 'str',
        'postal_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'street_name': 'streetName',
        'town_name': 'townName',
        'postal_code': 'postalCode',
        'country': 'country'
    }

    def __init__(self, street_name=None, town_name=None, postal_code=None, country=None, _configuration=None):  # noqa: E501
        """AddressDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._street_name = None
        self._town_name = None
        self._postal_code = None
        self._country = None
        self.discriminator = None

        if street_name is not None:
            self.street_name = street_name
        if town_name is not None:
            self.town_name = town_name
        if postal_code is not None:
            self.postal_code = postal_code
        self.country = country

    @property
    def street_name(self):
        """Gets the street_name of this AddressDto.  # noqa: E501


        :return: The street_name of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this AddressDto.


        :param street_name: The street_name of this AddressDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                street_name is not None and len(street_name) > 70):
            raise ValueError("Invalid value for `street_name`, length must be less than or equal to `70`")  # noqa: E501

        self._street_name = street_name

    @property
    def town_name(self):
        """Gets the town_name of this AddressDto.  # noqa: E501


        :return: The town_name of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this AddressDto.


        :param town_name: The town_name of this AddressDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                town_name is not None and len(town_name) > 55):
            raise ValueError("Invalid value for `town_name`, length must be less than or equal to `55`")  # noqa: E501

        self._town_name = town_name

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressDto.  # noqa: E501


        :return: The postal_code of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressDto.


        :param postal_code: The postal_code of this AddressDto.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                postal_code is not None and len(postal_code) > 14):
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `14`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this AddressDto.  # noqa: E501


        :return: The country of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDto.


        :param country: The country of this AddressDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country is not None and len(country) > 2):
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressDto):
            return True

        return self.to_dict() != other.to_dict()
