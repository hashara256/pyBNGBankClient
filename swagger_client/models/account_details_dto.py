# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccountDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'iban': 'str',
        'currency': 'str',
        'name': 'str',
        'product': 'str',
        'cash_account_type': 'str',
        'status': 'str',
        'bic': 'str',
        'linked_accounts': 'str',
        'usage': 'str',
        'details': 'str',
        'balances': 'list[BalanceDto]',
        'links': 'ReadAccountListResponseLinksDto'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'iban': 'iban',
        'currency': 'currency',
        'name': 'name',
        'product': 'product',
        'cash_account_type': 'cashAccountType',
        'status': 'status',
        'bic': 'bic',
        'linked_accounts': 'linkedAccounts',
        'usage': 'usage',
        'details': 'details',
        'balances': 'balances',
        'links': '_links'
    }

    def __init__(self, resource_id=None, iban=None, currency=None, name=None, product=None, cash_account_type=None, status=None, bic=None, linked_accounts=None, usage=None, details=None, balances=None, links=None, _configuration=None):  # noqa: E501
        """AccountDetailsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource_id = None
        self._iban = None
        self._currency = None
        self._name = None
        self._product = None
        self._cash_account_type = None
        self._status = None
        self._bic = None
        self._linked_accounts = None
        self._usage = None
        self._details = None
        self._balances = None
        self._links = None
        self.discriminator = None

        if resource_id is not None:
            self.resource_id = resource_id
        if iban is not None:
            self.iban = iban
        if currency is not None:
            self.currency = currency
        if name is not None:
            self.name = name
        if product is not None:
            self.product = product
        if cash_account_type is not None:
            self.cash_account_type = cash_account_type
        if status is not None:
            self.status = status
        if bic is not None:
            self.bic = bic
        if linked_accounts is not None:
            self.linked_accounts = linked_accounts
        if usage is not None:
            self.usage = usage
        if details is not None:
            self.details = details
        if balances is not None:
            self.balances = balances
        if links is not None:
            self.links = links

    @property
    def resource_id(self):
        """Gets the resource_id of this AccountDetailsDto.  # noqa: E501

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts endpoint.  # noqa: E501

        :return: The resource_id of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AccountDetailsDto.

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts endpoint.  # noqa: E501

        :param resource_id: The resource_id of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def iban(self):
        """Gets the iban of this AccountDetailsDto.  # noqa: E501

        IBAN of an account.  # noqa: E501

        :return: The iban of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this AccountDetailsDto.

        IBAN of an account.  # noqa: E501

        :param iban: The iban of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def currency(self):
        """Gets the currency of this AccountDetailsDto.  # noqa: E501

        ISO 4217 Alpha 3 currency code.  # noqa: E501

        :return: The currency of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountDetailsDto.

        ISO 4217 Alpha 3 currency code.  # noqa: E501

        :param currency: The currency of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this AccountDetailsDto.  # noqa: E501

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :return: The name of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDetailsDto.

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :param name: The name of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product(self):
        """Gets the product of this AccountDetailsDto.  # noqa: E501

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :return: The product of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AccountDetailsDto.

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :param product: The product of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def cash_account_type(self):
        """Gets the cash_account_type of this AccountDetailsDto.  # noqa: E501

        ExternalCashAccountType1Code from ISO 20022.  # noqa: E501

        :return: The cash_account_type of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._cash_account_type

    @cash_account_type.setter
    def cash_account_type(self, cash_account_type):
        """Sets the cash_account_type of this AccountDetailsDto.

        ExternalCashAccountType1Code from ISO 20022.  # noqa: E501

        :param cash_account_type: The cash_account_type of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._cash_account_type = cash_account_type

    @property
    def status(self):
        """Gets the status of this AccountDetailsDto.  # noqa: E501

        <p>Account status. The value is one of the following:</p>  <ul>    <li>\"enabled\": account is available</li>    <li>\"deleted\": account is terminated</li>    <li>\"blocked\": account is blocked e.g. for legal reasons. If this field is not used, than the account is available in the sense of this specification.</li>  </ul>  # noqa: E501

        :return: The status of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountDetailsDto.

        <p>Account status. The value is one of the following:</p>  <ul>    <li>\"enabled\": account is available</li>    <li>\"deleted\": account is terminated</li>    <li>\"blocked\": account is blocked e.g. for legal reasons. If this field is not used, than the account is available in the sense of this specification.</li>  </ul>  # noqa: E501

        :param status: The status of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def bic(self):
        """Gets the bic of this AccountDetailsDto.  # noqa: E501

        BICFI.  # noqa: E501

        :return: The bic of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this AccountDetailsDto.

        BICFI.  # noqa: E501

        :param bic: The bic of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this AccountDetailsDto.  # noqa: E501

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.  # noqa: E501

        :return: The linked_accounts of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this AccountDetailsDto.

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.  # noqa: E501

        :param linked_accounts: The linked_accounts of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._linked_accounts = linked_accounts

    @property
    def usage(self):
        """Gets the usage of this AccountDetailsDto.  # noqa: E501

        <p>Specifies the usage of the account</p>  <ul>    <li>PRIV: private personal account</li>    <li>ORGA: professional account</li>  </ul>  # noqa: E501

        :return: The usage of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AccountDetailsDto.

        <p>Specifies the usage of the account</p>  <ul>    <li>PRIV: private personal account</li>    <li>ORGA: professional account</li>  </ul>  # noqa: E501

        :param usage: The usage of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def details(self):
        """Gets the details of this AccountDetailsDto.  # noqa: E501

        <p>Specifications that might be provided by the ASPSP</p>  <ul>    <li>characteristics of the account</li>    <li>characteristics of the relevant card</li>  </ul>  # noqa: E501

        :return: The details of this AccountDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AccountDetailsDto.

        <p>Specifications that might be provided by the ASPSP</p>  <ul>    <li>characteristics of the account</li>    <li>characteristics of the relevant card</li>  </ul>  # noqa: E501

        :param details: The details of this AccountDetailsDto.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def balances(self):
        """Gets the balances of this AccountDetailsDto.  # noqa: E501

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list migght be restricted to the current ballance.  # noqa: E501

        :return: The balances of this AccountDetailsDto.  # noqa: E501
        :rtype: list[BalanceDto]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountDetailsDto.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list migght be restricted to the current ballance.  # noqa: E501

        :param balances: The balances of this AccountDetailsDto.  # noqa: E501
        :type: list[BalanceDto]
        """

        self._balances = balances

    @property
    def links(self):
        """Gets the links of this AccountDetailsDto.  # noqa: E501

        <p>Links to the account, which can be directly used for retrieving account information from this dedicated account.</p>  <p>Links to \"balances\" and/or \"transactions\"</p>  <p>These links are only supported, when the corresponding consent has been already granted.</p>  # noqa: E501

        :return: The links of this AccountDetailsDto.  # noqa: E501
        :rtype: ReadAccountListResponseLinksDto
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountDetailsDto.

        <p>Links to the account, which can be directly used for retrieving account information from this dedicated account.</p>  <p>Links to \"balances\" and/or \"transactions\"</p>  <p>These links are only supported, when the corresponding consent has been already granted.</p>  # noqa: E501

        :param links: The links of this AccountDetailsDto.  # noqa: E501
        :type: ReadAccountListResponseLinksDto
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetailsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountDetailsDto):
            return True

        return self.to_dict() != other.to_dict()
