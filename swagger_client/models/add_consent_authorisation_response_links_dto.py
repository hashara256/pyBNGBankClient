# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddConsentAuthorisationResponseLinksDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sca_o_auth': 'HrefTypeDto',
        'sca_status': 'HrefTypeDto'
    }

    attribute_map = {
        'sca_o_auth': 'scaOAuth',
        'sca_status': 'scaStatus'
    }

    def __init__(self, sca_o_auth=None, sca_status=None, _configuration=None):  # noqa: E501
        """AddConsentAuthorisationResponseLinksDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sca_o_auth = None
        self._sca_status = None
        self.discriminator = None

        if sca_o_auth is not None:
            self.sca_o_auth = sca_o_auth
        if sca_status is not None:
            self.sca_status = sca_status

    @property
    def sca_o_auth(self):
        """Gets the sca_o_auth of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501

        A link to the OAuth2 configuration endpoint. When this link is present, one of the next steps is to redirect the PSU to the OAuth2 authorization endpoint.  Note that the creation of consent authorisation sub-resources at this ASPSP are created implicitly. Explicitly creation of such sub-resources do not have any follow-up actions.  Use scope PIS to redirect the PSU to the OAuth2 authorization endpoint for authorisation, instead.  # noqa: E501

        :return: The sca_o_auth of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self._sca_o_auth

    @sca_o_auth.setter
    def sca_o_auth(self, sca_o_auth):
        """Sets the sca_o_auth of this AddConsentAuthorisationResponseLinksDto.

        A link to the OAuth2 configuration endpoint. When this link is present, one of the next steps is to redirect the PSU to the OAuth2 authorization endpoint.  Note that the creation of consent authorisation sub-resources at this ASPSP are created implicitly. Explicitly creation of such sub-resources do not have any follow-up actions.  Use scope PIS to redirect the PSU to the OAuth2 authorization endpoint for authorisation, instead.  # noqa: E501

        :param sca_o_auth: The sca_o_auth of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self._sca_o_auth = sca_o_auth

    @property
    def sca_status(self):
        """Gets the sca_status of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501

        A link to retrieve status information of the SCA method for this consent authorisation.  # noqa: E501

        :return: The sca_status of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501
        :rtype: HrefTypeDto
        """
        return self._sca_status

    @sca_status.setter
    def sca_status(self, sca_status):
        """Sets the sca_status of this AddConsentAuthorisationResponseLinksDto.

        A link to retrieve status information of the SCA method for this consent authorisation.  # noqa: E501

        :param sca_status: The sca_status of this AddConsentAuthorisationResponseLinksDto.  # noqa: E501
        :type: HrefTypeDto
        """

        self._sca_status = sca_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddConsentAuthorisationResponseLinksDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddConsentAuthorisationResponseLinksDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddConsentAuthorisationResponseLinksDto):
            return True

        return self.to_dict() != other.to_dict()
