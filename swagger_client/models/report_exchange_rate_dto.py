# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportExchangeRateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_currency': 'str',
        'exchange_rate': 'str',
        'unit_currency': 'str',
        'target_currency': 'str',
        'quotation_date': 'str',
        'contract_identification': 'str'
    }

    attribute_map = {
        'source_currency': 'sourceCurrency',
        'exchange_rate': 'exchangeRate',
        'unit_currency': 'unitCurrency',
        'target_currency': 'targetCurrency',
        'quotation_date': 'quotationDate',
        'contract_identification': 'contractIdentification'
    }

    def __init__(self, source_currency=None, exchange_rate=None, unit_currency=None, target_currency=None, quotation_date=None, contract_identification=None, _configuration=None):  # noqa: E501
        """ReportExchangeRateDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source_currency = None
        self._exchange_rate = None
        self._unit_currency = None
        self._target_currency = None
        self._quotation_date = None
        self._contract_identification = None
        self.discriminator = None

        if source_currency is not None:
            self.source_currency = source_currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if unit_currency is not None:
            self.unit_currency = unit_currency
        if target_currency is not None:
            self.target_currency = target_currency
        if quotation_date is not None:
            self.quotation_date = quotation_date
        if contract_identification is not None:
            self.contract_identification = contract_identification

    @property
    def source_currency(self):
        """Gets the source_currency of this ReportExchangeRateDto.  # noqa: E501

        Currency from which an amount is to be converted in a currency conversion.  # noqa: E501

        :return: The source_currency of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this ReportExchangeRateDto.

        Currency from which an amount is to be converted in a currency conversion.  # noqa: E501

        :param source_currency: The source_currency of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._source_currency = source_currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ReportExchangeRateDto.  # noqa: E501

        Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.  # noqa: E501

        :return: The exchange_rate of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ReportExchangeRateDto.

        Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.  # noqa: E501

        :param exchange_rate: The exchange_rate of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def unit_currency(self):
        """Gets the unit_currency of this ReportExchangeRateDto.  # noqa: E501

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1EUR = xxxCUR, the unit currency is EUR.  # noqa: E501

        :return: The unit_currency of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._unit_currency

    @unit_currency.setter
    def unit_currency(self, unit_currency):
        """Sets the unit_currency of this ReportExchangeRateDto.

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1EUR = xxxCUR, the unit currency is EUR.  # noqa: E501

        :param unit_currency: The unit_currency of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._unit_currency = unit_currency

    @property
    def target_currency(self):
        """Gets the target_currency of this ReportExchangeRateDto.  # noqa: E501

        Currency into which an amount is to be converted in a currency conversion.  # noqa: E501

        :return: The target_currency of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this ReportExchangeRateDto.

        Currency into which an amount is to be converted in a currency conversion.  # noqa: E501

        :param target_currency: The target_currency of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._target_currency = target_currency

    @property
    def quotation_date(self):
        """Gets the quotation_date of this ReportExchangeRateDto.  # noqa: E501

        Date at which an exchange rate is quoted.  # noqa: E501

        :return: The quotation_date of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._quotation_date

    @quotation_date.setter
    def quotation_date(self, quotation_date):
        """Sets the quotation_date of this ReportExchangeRateDto.

        Date at which an exchange rate is quoted.  # noqa: E501

        :param quotation_date: The quotation_date of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._quotation_date = quotation_date

    @property
    def contract_identification(self):
        """Gets the contract_identification of this ReportExchangeRateDto.  # noqa: E501

        Unique identification to unambiguously identify the foreign exchange contract.  # noqa: E501

        :return: The contract_identification of this ReportExchangeRateDto.  # noqa: E501
        :rtype: str
        """
        return self._contract_identification

    @contract_identification.setter
    def contract_identification(self, contract_identification):
        """Sets the contract_identification of this ReportExchangeRateDto.

        Unique identification to unambiguously identify the foreign exchange contract.  # noqa: E501

        :param contract_identification: The contract_identification of this ReportExchangeRateDto.  # noqa: E501
        :type: str
        """

        self._contract_identification = contract_identification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportExchangeRateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExchangeRateDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExchangeRateDto):
            return True

        return self.to_dict() != other.to_dict()
