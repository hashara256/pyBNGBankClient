# coding: utf-8

"""
    BNG Bank - XS2A Interface 1.0

    <h1>Summary</h1>  <p>The <strong>BNG Bank - XS2A Interface</strong> <em>API</em>. This API enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.</p>  <p>The possible Approaches are:</p>  <ul>     <li>Redirect SCA OAuth Approach</li>  </ul>  <h2>Some General Remarks Related to this version of the specification:</h2>  <ul>     <li>        <p><strong>This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.</strong>It is not an replacement in any sense. The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API.</p>     </li>     <li>        <p><strong>This API definition contains the REST-API for requests from the TPP to the ASPSP.</strong></p>     </li>  </ul>  <h2>General Remarks on Data Types</h2>  <p>The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters</p>  <p>a b c d e f g h i j k l m n o p q r s t u v w x y z</p>  <p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>  <p>0 1 2 3 4 5 6 7 8 9</p>  <p>/ - ? : ( ) . , ' +</p>  <p>Space</p>  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BalanceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_amount': 'EuroAmountFieldDto',
        'balance_type': 'str',
        'credit_limit_included': 'bool',
        'last_change_date_time': 'str',
        'reference_date': 'str',
        'last_committed_transaction': 'str'
    }

    attribute_map = {
        'balance_amount': 'balanceAmount',
        'balance_type': 'balanceType',
        'credit_limit_included': 'creditLimitIncluded',
        'last_change_date_time': 'lastChangeDateTime',
        'reference_date': 'referenceDate',
        'last_committed_transaction': 'lastCommittedTransaction'
    }

    def __init__(self, balance_amount=None, balance_type=None, credit_limit_included=None, last_change_date_time=None, reference_date=None, last_committed_transaction=None, _configuration=None):  # noqa: E501
        """BalanceDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._balance_amount = None
        self._balance_type = None
        self._credit_limit_included = None
        self._last_change_date_time = None
        self._reference_date = None
        self._last_committed_transaction = None
        self.discriminator = None

        if balance_amount is not None:
            self.balance_amount = balance_amount
        if balance_type is not None:
            self.balance_type = balance_type
        if credit_limit_included is not None:
            self.credit_limit_included = credit_limit_included
        if last_change_date_time is not None:
            self.last_change_date_time = last_change_date_time
        if reference_date is not None:
            self.reference_date = reference_date
        if last_committed_transaction is not None:
            self.last_committed_transaction = last_committed_transaction

    @property
    def balance_amount(self):
        """Gets the balance_amount of this BalanceDto.  # noqa: E501


        :return: The balance_amount of this BalanceDto.  # noqa: E501
        :rtype: EuroAmountFieldDto
        """
        return self._balance_amount

    @balance_amount.setter
    def balance_amount(self, balance_amount):
        """Sets the balance_amount of this BalanceDto.


        :param balance_amount: The balance_amount of this BalanceDto.  # noqa: E501
        :type: EuroAmountFieldDto
        """

        self._balance_amount = balance_amount

    @property
    def balance_type(self):
        """Gets the balance_type of this BalanceDto.  # noqa: E501

        <p>The following balance types are defined:</p>  <ul>    <li>      <p>\"closingBooked\":Balance of the account at the end of the pre-agreed account reporting period.It is the sum of the opening booked balance at the beginning of the period and all entries bookedto the account during the pre-agreed account reporting period.</p>    </li>    <li>      <p>\"expected\":Balance composed of booked entries and pending items known at the time of calculation,which projects the end of day balance if everything is booked on the account and no other entry is posted.</p>    </li>  </ul>  # noqa: E501

        :return: The balance_type of this BalanceDto.  # noqa: E501
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this BalanceDto.

        <p>The following balance types are defined:</p>  <ul>    <li>      <p>\"closingBooked\":Balance of the account at the end of the pre-agreed account reporting period.It is the sum of the opening booked balance at the beginning of the period and all entries bookedto the account during the pre-agreed account reporting period.</p>    </li>    <li>      <p>\"expected\":Balance composed of booked entries and pending items known at the time of calculation,which projects the end of day balance if everything is booked on the account and no other entry is posted.</p>    </li>  </ul>  # noqa: E501

        :param balance_type: The balance_type of this BalanceDto.  # noqa: E501
        :type: str
        """

        self._balance_type = balance_type

    @property
    def credit_limit_included(self):
        """Gets the credit_limit_included of this BalanceDto.  # noqa: E501

        A flag indicating if the credit limit of the corresponding account is included in the calculation of the balance, where applicable.  # noqa: E501

        :return: The credit_limit_included of this BalanceDto.  # noqa: E501
        :rtype: bool
        """
        return self._credit_limit_included

    @credit_limit_included.setter
    def credit_limit_included(self, credit_limit_included):
        """Sets the credit_limit_included of this BalanceDto.

        A flag indicating if the credit limit of the corresponding account is included in the calculation of the balance, where applicable.  # noqa: E501

        :param credit_limit_included: The credit_limit_included of this BalanceDto.  # noqa: E501
        :type: bool
        """

        self._credit_limit_included = credit_limit_included

    @property
    def last_change_date_time(self):
        """Gets the last_change_date_time of this BalanceDto.  # noqa: E501

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known on the account, which is not yet booked.  # noqa: E501

        :return: The last_change_date_time of this BalanceDto.  # noqa: E501
        :rtype: str
        """
        return self._last_change_date_time

    @last_change_date_time.setter
    def last_change_date_time(self, last_change_date_time):
        """Sets the last_change_date_time of this BalanceDto.

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known on the account, which is not yet booked.  # noqa: E501

        :param last_change_date_time: The last_change_date_time of this BalanceDto.  # noqa: E501
        :type: str
        """

        self._last_change_date_time = last_change_date_time

    @property
    def reference_date(self):
        """Gets the reference_date of this BalanceDto.  # noqa: E501

        Reference date of the balance.  # noqa: E501

        :return: The reference_date of this BalanceDto.  # noqa: E501
        :rtype: str
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this BalanceDto.

        Reference date of the balance.  # noqa: E501

        :param reference_date: The reference_date of this BalanceDto.  # noqa: E501
        :type: str
        """

        self._reference_date = reference_date

    @property
    def last_committed_transaction(self):
        """Gets the last_committed_transaction of this BalanceDto.  # noqa: E501

        EntryReference of the last commited transaction to support the TPP in identifying whether all PSU transactions are already known.  # noqa: E501

        :return: The last_committed_transaction of this BalanceDto.  # noqa: E501
        :rtype: str
        """
        return self._last_committed_transaction

    @last_committed_transaction.setter
    def last_committed_transaction(self, last_committed_transaction):
        """Sets the last_committed_transaction of this BalanceDto.

        EntryReference of the last commited transaction to support the TPP in identifying whether all PSU transactions are already known.  # noqa: E501

        :param last_committed_transaction: The last_committed_transaction of this BalanceDto.  # noqa: E501
        :type: str
        """

        self._last_committed_transaction = last_committed_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BalanceDto):
            return True

        return self.to_dict() != other.to_dict()
